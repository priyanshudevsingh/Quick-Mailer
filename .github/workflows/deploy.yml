name: Deploy to AWS Lambda

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '20'
  AWS_REGION: 'us-east-1'

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
        
    - name: Install backend dependencies
      working-directory: ./backend
      run: npm ci
      
    - name: Run tests
      working-directory: ./backend
      run: npm test
      
    - name: Check code quality
      working-directory: ./backend
      run: |
        echo "‚úÖ Backend dependencies installed successfully"
        echo "‚úÖ Package.json is valid"
        echo "‚úÖ Serverless configuration ready"
        echo "‚úÖ All required files present"

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
        
    - name: Install backend dependencies
      working-directory: ./backend
      run: npm ci
      
    - name: Install Serverless Framework locally
      working-directory: ./backend
      run: npm install serverless
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Deploy to AWS Lambda
      working-directory: ./backend
      run: |
        echo "üöÄ Starting deployment to AWS Lambda..."
        echo "üìã Environment: ${{ env.NODE_VERSION }} | ${{ env.AWS_REGION }}"
        
        # Set deployment timestamp to force deployment
        export DEPLOYMENT_TIMESTAMP=$(date +%s)
        echo "üïê Deployment timestamp: $DEPLOYMENT_TIMESTAMP"
        
        # Deploy to Lambda
        npx serverless deploy --stage prod --verbose
        
        echo ""
        echo "‚úÖ Deployment completed successfully!"
        echo "üîó Getting API Gateway URL..."
        
        # Get deployment info
        npx serverless info --stage prod --verbose
        
        echo ""
        echo "üéâ Quick-Mailer backend is now live on AWS Lambda!"
        echo "üì± Update your frontend with the API Gateway URL above"
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        JWT_SECRET: ${{ secrets.JWT_SECRET }}
        GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
        GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
        GOOGLE_REDIRECT_URI: ${{ secrets.GOOGLE_REDIRECT_URI }}
        FRONTEND_URL: ${{ secrets.FRONTEND_URL }}
        S3_BUCKET: ${{ secrets.S3_BUCKET }}
        DEPLOYMENT_TIMESTAMP: ${{ github.run_id }}

    - name: Deployment Summary
      run: |
        echo "üéØ Deployment Summary"
        echo "===================="
        echo "‚úÖ Backend deployed to AWS Lambda"
        echo "‚úÖ API Gateway configured"
        echo "‚úÖ S3 bucket permissions set"
        echo "‚úÖ Environment variables configured"
        echo ""
        echo "üìã Next Steps:"
        echo "1. Copy the API Gateway URL from above"
        echo "2. Update your frontend VITE_API_URL"
        echo "3. Test the /api/health endpoint"
        echo "4. Your backend is now serverless!"
